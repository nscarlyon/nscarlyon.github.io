---
layout: post
title:  "Apprenticeship Patterns
date:   2016-10-22 10:26:33 -0400
---

When I was young, I used to think smart people were people who had a lot of facts memorized, but as I grew older,
I realized that they were intelligent because they adopted certain patterns of thinking. I've picked up various
patterns from books like The 7 Habits of Highly Effective People. Now, I have discovered a new toolbox of
patterns specifically designed for software developers in a book called Apprenticeship Patterns: Guidance for
the Aspiring Software Craftsman by David H. Hoover and Adewale Oshineye. I will share three patterns from the
book.

[You may read it for free online.](http://chimera.labs.oreilly.com/books/1234000001813/index.html)

**Retreat into Competence**

I tested this pattern out yesterday. I was struggling with figuring out why one of the pages was not displaying
correctly when I deploy it to Heroku. I tried taking a break, but that didn't help. I was stuck, and felt
helpless. When I read about this pattern, I decided to apply it to my current predicament. I retreated into
competence by refactoring some form validation errors, which felt backwards to me at first. It felt odd to
purposefully work on something I felt confident in accomplishing. However, after finishing the task, I returned
to the problem with a renewed sense of energy and pride. I solved the issue(it turned out to be simpler than
I thought). By reminding myself of my competence, I was able to forge forward. This experience reminded of a
quote that went something like, "You will always know more about coding than you did before". Sometimes I
forget that truth. As long as I keep learning, I will always know more than I did yesterday. I will most
certainly keep this pattern for future use, while keeping in mind that it is easy to abuse this pattern if
you retreat too far into competence in order to ignore your fear of failing.


**Kindred Spirits**

In search of a new programming home, this pattern really resonated with me. Since my curriculum was all online,
I did not have the advantage of seeing my classmates on a daily basis. This was compounded with the fact that
I'm new to Georgia, so I am still learning the area. However, I am making steps to find kindred spirits by
attending at least two meet-ups every week. I'm already recognizing familiar faces. Ideally, I would like
to form a relationship with somebody where we can 'rub elbows', or feel free to call each other up to share
coding problems. However, I know that it will take some time for me to find kindred spirits. Right now, I'm
focusing on getting to know people at these meet-ups and figuring out ways I can provide value to the community.
For the latter, I would like to give a lightning talk at a meet-up. I have never done such a thing before,
so I am meeting up with a fellow alumni for advice on the matter.

**Use the Source**

While reading this section, I was struck by this quote: "People who can quickly absorb knowledge directly
from the code soon become much better programmers, because their teacher is every line of code written by
every programmer ever born." It's funny that this idea has not really come to me. I have read the example
codes in my curriculum and code from tutorials or Youtube videos, but I have never truly tried studying the
source. It actually didn't occur to me, which I think is funny because I firmly believe that good writers
are good readers. I think it is easy to believe that coding is an isolated act of creation, when in reality,
that creation was born out of your experiences. I even saw this while I was teaching. Children have a
very difficult time distinguishing quality. The best way to teach them is to constantly provide examples of
good work. My students copied beautiful lines from books they read. As their brains acclimated to reading
and writing good sentences, they begin to understand what made a good sentence. I know that the same would
be true for programming. I will start by reading the source code for the Ruby language on
[Github](https://github.com/ruby/ruby), and then writing my discoveries in a blog post.

**Final Thoughts**

There were many more patterns in this book that resonated with me such as "Rubbing Elbows", "Confronting your
Ignorance", and "Reading Constantly". I will certainly refer to this book in the future. 
